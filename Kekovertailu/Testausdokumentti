Testasin kekoja manuaalisesti lisäämällä niihin ensin satunnaisia lukuja väliltä 1-100 ja sitten poistamalla ne. Binäärikeon ja binomikeon tapauksessa luvut tulivat ulos järjestyksessä suurimmasta pienimpään, mutta Fibonacci-keon tapauksessa joko järjestys oli väärä tai keko tyhjeni ennenaikaisesti tai aiheutti poikkeuksen.

En käyttänyt työssä JUnit-testausta koska manuaalinen testaus riitti osoittamaan binäärikeon ja binomikeon toimivuuden ja Fibonacci-keon toimimattomuuden.

Seuraavaksi testasin toimivia kekoja erikokoisilla syötteillä kekojen operaatioiden aikavaativuuksien selvittämiseksi. Sain seuraavat tulokset (n operaatioon kulunut aika millisekunteina):

Syötteen		Binäärikeko			Binomikeko
koko (n)	insert	max	del_max		insert	max	del_max
-----------------------------------------------------------------------
10000		10	0	10		18	1	31
50000		32	2	37		78	4	82
100000		47	2	55		82	4	103
200000		90	2	105		128	6	283
300000		139	2	150		227	17	399
500000		146	12	306		389	23	741
700000		202	14	426		440	38	1064
1000000		265	19	622		577	62	1514
1500000		362	29	928		899	90	2238
2000000		502	39	1267		1107	105	3028
3000000		703	57	1886		2299	206	4617
4000000		1047	80	2631		3033	227	6874
5000000		1254	95	3234		4620	283	8819
6000000		1483	121	3948		6853	406	13022

Kun nämä ajat jaetaan syötteen koolla, saadaan yhteen operaatioon kulunut keskimääräinen aika (ajat nanosekunteina):

Syötteen		Binäärikeko			Binomikeko
koko (n)	insert	max	del_max		insert	max	del_max
-----------------------------------------------------------------------
10000		1000	0	1000		1800	100	3100
50000		640	40	740		1560	80	1640
100000		470	20	550		820	40	1030
200000		450	10	525		640	30	1415
300000		463	7	500		757	57	1330
500000		292	24	612		778	46	1482
700000		289	20	609		629	54	1520
1000000		265	19	622		577	62	1514
1500000		241	19	618		599	60	1492
2000000		251	20	634		554	53	1514
3000000		234	19	629		766	69	1539
4000000		262	20	658		758	57	1719
5000000		251	19	647		924	57	1764
6000000		247	20	658		1142	68	2170

Tulosten perusteella binäärikeon max-operaation aikavaativuus on O(1) ja del_max- operaation O(log n) eli samat kuin teoreettiset aikavaativuudet. Binomikeon del_max-operaatio noudattaa myös O(log n) aikavaativuutta. Binomikeon max-operaation tuloksista ei voi päätellä, onko operaation aikavaativuus O(1) vai teorian vaatima O(log n). Jos alle miljoonan syötteen tulokset jätetään huomiotta, binomikeon insert-operaatio noudattaa O(log n) aikavaativuutta. Binäärikeon insert-operaation tulokset ovat erittäin poikkeavia, sillä yhteen operaatioon kuluva keskimääräinen aika näyttäisi pienenevän syötteen koon kasvaessa, mikä on täysin odotusten vastaista.

Binäärikeko on tulosten perusteella tehokkaampi keko kuin binomikeko, mikä oli odotettavaa, koska binäärikeon taulukkototeutus on kevyempi kuin binomikeon linkitetty toteutus.
